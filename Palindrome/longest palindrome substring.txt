#include <stdio.h>
#include <string.h>

// A utility function to print a substring str[low..high]
char str[100005];

// This function prints the longest palindrome substring
// of str[].
// It also returns the length of the longest palindrome
int longestPalSubstr(char *str)
{
    int maxLength = 1;  // The result (length of LPS)

    int start = 0;
    int len = strlen(str);

    int low, high;

    // One by one consider every character as center point of
    // even and length palindromes
    for (int i = 1; i < len; ++i)
    {
        // Find the longest even length palindrome with center points
        // as i-1 and i.
        low = i - 1;
        high = i;
        while (low >= 0 && high < len && str[low] == str[high])
        {
            if (high - low + 1 > maxLength)
            {
                start = low;
                maxLength = high - low + 1;
            }
            --low;
            ++high;
        }

        // Find the longest odd length palindrome with center
        // point as i
        low = i - 1;
        high = i + 1;
        while (low >= 0 && high < len && str[low] == str[high])
        {
            if (high - low + 1 > maxLength)
            {
                start = low;
                maxLength = high - low + 1;
            }
            --low;
            ++high;
        }
    }

   // printf("Longest palindrome substring is: ");
   // printSubStr(str, start, start + maxLength - 1);

    return maxLength;
}
int main()
{
    //char str[] = "baaacabbad";
    //cin>>str;
    int t;
    scanf("%d",&t);
    int ks=1;
    while(t--)
    {
    scanf("%s",str);
    printf("Case %d: %d\n",ks, longestPalSubstr( str ) );
    ks++;
    }
    return 0;
}
