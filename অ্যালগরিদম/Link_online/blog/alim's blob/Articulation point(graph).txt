/*
Algorithm: Articulation Point
Problem: Lightoj-1063
 
An Articulation point in a connected graph is a vertex that,
if delete, would break the graph into two or more pieces.
 
Input: An undirected graph G(V,E)
Output: Number of Articulation Point
*/
 
#include<bits/stdc++.h>
using namespace std;
 
int node,edge;
vector<int>adj[10009];
int discovery[10009];
int low[10009];
int cnt[10009];
int art[10009];
int tt=0;
 
void articulation_point(int u,int parent)
{
    discovery[u]=++tt;
    low[u]=discovery[u];
    int sz=adj[u].size();
    for(int i=0;i<sz;i++)
    {
        int v=adj[u][i];
        if(low[v]==-1) // a tree-edge
        {
            articulation_point(v,u);
            cnt[u]++;
            low[u]=min(low[u],low[v]);
            if(low[v]>=discovery[u])
                art[u]=1;
        }
        else if(v!=parent) //a back-edge
            low[u]=min(low[u],discovery[v]);
    }
}
 
int main()
{
    int i,j,k,n,m,test,t=0,x,y;
    scanf("%d",&test);
    while(test--)
    {
        scanf("%d%d",&node,&edge);
        tt=0;
        memset(low,-1,sizeof(low));
        memset(cnt,0,sizeof(cnt));
        memset(art,0,sizeof(art));
        memset(discovery,0,sizeof(discovery));
        for(i=0;i<edge;i++)
        {
            scanf("%d%d",&x,&y);
            adj[x].push_back(y);
            adj[y].push_back(x);
        }
        for(i=1;i<=node;i++)
        {
            if(low[i]==-1)
            {
                articulation_point(i,i);
                if(cnt[i]==1)
                    art[i]=0;
            }
        }
        int ans=0;
        for(i=1;i<=node;i++)
        {
            if(art[i]) ans++;
        }
        printf("Case %d: %d\n",++t,ans);
        for(i=0;i<=10004;i++)
            adj[i].clear();
    }
    return 0;
}