/*
Given an array with N elements, indexed from 1 to N. Now you will
be given some queries in the form I J, your task is to find the
minimum value from index I to J.
    Algorithm Used: Segment Tree
    Useful Links: http://lightoj.com/volume_showproblem.php?problem=1082
*/
 
#include<bits/stdc++.h>
using namespace std;
#define LL long long
const int inf=1000000000;
 
int tree[1000006];
int a[100005];
void init(int node,int b,int e)
{
    if(b==e)
    {
        tree[node]=a[b];
        return;
    }
    int left=node<<1;
    int right=left+1;
    int mid=(b+e)/2;
    init(left,b,mid);
    init(right,mid+1,e);
    tree[node]=min(tree[left],tree[right]);
}
int query(int node,int b,int e,int i,int j)
{
    if(i>e||j<b) return inf;
    if(b>=i&&e<=j) return tree[node];
    int left=node<<1;
    int right=left+1;
    int mid=(b+e)/2;
    int p1=query(left,b,mid,i,j);
    int p2=query(right,mid+1,e,i,j);
    return min(p1,p2);
}
int main()
{
    int i,j,k,n,d,test,t=0,q,u,v;
    scanf("%d",&test);
    while(test--)
    {
        scanf("%d%d",&n,&q);
        for(i=1;i<=n;i++)
            scanf("%d",&a[i]);
            init(1,1,n);
            printf("Case %d:\n",++t);
        while(q--)
        {
            scanf("%d%d",&u,&v);
            printf("%d\n",query(1,1,n,u,v));
        }
    }
    return 0;
}