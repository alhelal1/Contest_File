/*
Given a array with N integers. You have to output the maximum value if we perform
XOR operation between any two numbers of the array.
*/
 
#include<bits/stdc++.h>
using namespace std;
#define LL long long
 
int On(int n,int pos)
{
    return n=n|(1<<pos);
}
 
int Off(int n,int pos)
{
    return n=n&~(1<<pos);
}
 
bool Check(int n,int pos)
{
    return (bool) (n&(1<<pos));
}
struct node
{
    node *next[3];
    node()
    {
        for(int i=0;i<2;i++)
            next[i]=NULL;
    }
};
node *root;
 
void insert(int n)
{
    node *curr=root;
    int id;
    for(int i=31;i>=0;i--)
    {
        if(Check(n,i)) id=1;
        else id=0;
        if(curr->next[id]==NULL) curr->next[id]=new node();
        curr=curr->next[id];
    }
}
 
int find(int n)
{
    node *curr=root;
    int ans=0;
    for(int i=31;i>=0;i--)
    {
        if(Check(n,i))
        {
            if(curr->next[0])
            {
                curr=curr->next[0];
                ans=On(ans,i);
            }
            else curr=curr->next[1];
        }
        else
        {
            if(curr->next[1])
            {
                curr=curr->next[1];
                ans=On(ans,i);
            }
            else curr=curr->next[0];
        }
    }
    return ans;
}
 
void del(node *curr)
{
    for(int i=0;i<2;i++)
    {
        if(curr->next[i])
            del(curr->next[i]);
    }
    delete(curr);
}
int main()
{
    int i,j,k,n,m,a[100009];
    while(cin>>n)
    {
        root=new node();
        for(i=0;i<n;i++)
        {
            cin>>a[i];
            insert(a[i]);
        }
        int max_xor=0;
        for(i=0;i<n;i++)
        {
            max_xor=max(max_xor,find(a[i]));
        }
        cout<<max_xor<<endl;
        del(root);
    }
    return 0;
}