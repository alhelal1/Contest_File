#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define pi acos(-1.0)
#define ff first
#define ss second
#define re return
#define QI queue<int>
#define SI stack<int>
#define SZ(x) ((int) (x).size())
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x) * (x))
#define ms(a,b) memset((a),(b),sizeof(a))
#define G() getchar()
#define MAX3(a,b,c) max(a,max(b,c))
#define II ( { int a ; read(a) ; a; } )
#define LL ( { Long a ; read(a) ; a; } )
#define DD ({double a; scanf("%lf", &a); a;})

double const EPS=3e-8;
using namespace std;

#define FI freopen ("input.txt", "r", stdin)
#define FO freopen ("output.txt", "w", stdout)

typedef long long Long;
typedef long long int64;
typedef unsigned long long ull;
typedef vector<int> vi ;
typedef set<int> si;
typedef vector<Long>vl;
typedef pair<int,int>pii;
typedef pair<string,int>psi;
typedef pair<Long,Long>pll;
typedef pair<double,double>pdd;
typedef vector<pii> vpii;

// For loop

#define forab(i, a, b)	for (__typeof (b) i = (a) ; i <= b ; ++i)
#define rep(i, n)		forab (i, 0, (n) - 1)
#define For(i, n)		forab (i, 1, n)
#define rofba(i, a, b)	for (__typeof (b)i = (b) ; i >= a ; --i)
#define per(i, n)		rofba (i, 0, (n) - 1)
#define rof(i, n)		rofba (i, 1, n)
#define forstl(i, s)	for (__typeof ((s).end ()) i = (s).begin (); i != (s).end (); ++i)

template< class T > T gcd(T a, T b) { return (b != 0 ? gcd<T>(b, a%b) : a); }
template< class T > T lcm(T a, T b) { return (a / gcd<T>(a, b) * b); }

//Fast Reader
template<class T>inline bool read(T &x){int c=getchar();int sgn=1;while(~c&&c<'0'||c>'9'){if(c=='-')sgn=-1;c=getchar();}for(x=0;~c&&'0'<=c&&c<='9';c=getchar())x=x*10+c-'0'; x*=sgn; return ~c;}

//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[]={2,1,-1,-2,-1,1};int dy[]={0,1,1,0,-1,-1}; //Hexagonal Direction

/* **************************************  My code start here ****************************************** */
const int N = 100005 ;
const int INF = 1 << 29 ;
int inp[N], a[N] , Lis[N] , Lds[N] , n , b[N] , freq[N] , ok[N] , mx = -1;
int LIS()
{
       int i , tmp , low , lis = 0 ;

       a[0] = -INF ;
       a[n] = INF ;
       for ( i = 0 ; i < n ; i++ )
       {
              low = lower_bound( a , a+n+1 , inp[i] ) - a;
              a[low] = inp[i] ;
              mx = max(mx , inp[i]);
              lis = max ( lis , low );
              Lis[i] = low ;
             // printf(" i :: %d inp[i] :: %d low :: %d\n",i,inp[i],low);

       }
       return lis ;
}
void LDS()
{
       int i , tmp , low , lds = 0 ;

       b[0] = -INF ;
       b[n] = INF;
       for ( i = n-1 ; i >=0 ; i-- )
       {
              low = lower_bound( b , b+n+1 , mx - inp[i] ) - b;
              b[low] = mx - inp[i] ;
              lds = max ( lds , low );
              Lds[i] = low ;
             // printf(" i :: %d inp[i]::%d low ::%d\n",i,inp[i],low);

       }
}
void input()
{
       int i ;
       n = II ;
       for ( i = 0 ; i < n ; i ++ ) scanf("%d",&inp[i]) , a[i] = b[i] = INF;

}
int main()
{
   // I will always use scanf and printf
   // May be i won't be a good programmer but i will be a good human being
   input();
   int anx = LIS();
   mx++;
   LDS();
   int i ;
    for ( i = 0 ; i < n ; i++ )
    {
        int x = Lis[i] + Lds[i] - 1 ;
        if ( x  ==  anx )
        {
            ok[i] = 1 ;
            freq[Lis[i]]++;
        }
    }
    for ( i = 0 ; i < n ; i++ )
    {
        if( ok[i] == 0 ) printf("1");
        else
        {
            if( freq[Lis[i]] == 1 )
            {
                printf("3");
            }
            else printf("2");
        }
    }
    puts("");


    return 0;
}