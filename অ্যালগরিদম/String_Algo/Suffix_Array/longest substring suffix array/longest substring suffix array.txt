#include <cstdio>
#include <iostream>     // std::cout
#include <algorithm>    // std::lower_bound, std::upper_bound, std::sort
#include <vector>       // std::vector
#include <stdio.h>      /* printf */
#include <math.h>       /* ceil */
#include <string.h>
#include <map>
#include <set>
#include <queue>
using namespace std;
 
#define pb push_back
#define lb lower_bound
#define ub upper_bound
#define MAX_N 1000                                // second approach: O(n log n)
 
 
typedef vector<int> vi;
typedef vector<vi> vv;
 
string T;                        // the input string, up to 100K characters
int n, m,maxLCP, idx;                                             // the length of input string
int RA[MAX_N], tempRA[MAX_N];             // rank array and temporary rank array
int SA[MAX_N], tempSA[MAX_N];         // suffix array and temporary suffix array
int c[MAX_N];
int Phi[MAX_N];
int PLCP[MAX_N];
int LCP[MAX_N];
string ans;
set<string> s;
 
void countingSort(int k)
{
    int i, sum, maxi = max(300, n);        // up to 255 ASCII chars or length of n
    memset(c, 0, sizeof c);                               // clear frequency table
    for (i = 0; i < n; i++)                    // count the frequency of each rank
        c[i + k < n ? RA[i + k] : 0]++;
    for (i = sum = 0; i < maxi; i++)
    {
        int t = c[i];
        c[i] = sum;
        sum += t;
    }
    for (i = 0; i < n; i++)               // shuffle the suffix array if necessary
        tempSA[c[SA[i] + k < n ? RA[SA[i] + k] : 0]++] = SA[i];
    for (i = 0; i < n; i++)                          // update the suffix array SA
        SA[i] = tempSA[i];
}
 
void constructSA()                // this version can go up to 100000 characters
{
    int i, k, r;
    for (i = 0; i < n; i++) RA[i] = T[i] - '.';                // initial rankings
    for (i = 0; i < n; i++) SA[i] = i;          // initial SA: {0, 1, 2, ..., n-1}
    for (k = 1; k < n; k <<= 1)              // repeat sorting process log n times
    {
        countingSort(k);       // actually radix sort: sort based on the second item
        countingSort(0);               // then (stable) sort based on the first item
        tempRA[SA[0]] = r = 0;                  // re-ranking; start from rank r = 0
        for (i = 1; i < n; i++)                         // compare adjacent suffices
            tempRA[SA[i]] =      // if same pair => same rank r; otherwise, increase r
                (RA[SA[i]] == RA[SA[i-1]] && RA[SA[i]+k] == RA[SA[i-1]+k]) ? r : ++r;
        for (i = 0; i < n; i++)                          // update the rank array RA
            RA[i] = tempRA[i];
    }
}
 
void computeLCP()
{
    int i, L;
    Phi[SA[0]] = -1;                                              // default value
    for (i = 1; i < n; i++)                                 // compute Phi in O(n)
        Phi[SA[i]] = SA[i-1];         // remember which suffix is behind this suffix
    for (i = L = 0; i < n; i++)                    // compute Permuted LCP in O(n)
    {
        if (Phi[i] == -1)
        {
            PLCP[i] = 0;    // special case
            continue;
        }
        while (T[i + L] == T[Phi[i] + L])
            L++;    // L will be increased max n times
        PLCP[i] = L;
        L = max(L-1, 0);                          // L will be decreased max n times
    }
    for (i = 1; i < n; i++)                                 // compute LCP in O(n)
        LCP[i] = PLCP[SA[i]];   // put the permuted LCP back to the correct position
}
int owner(int idx)
{
    return (idx < n-m-1) ? 1 : 2;
}
 
 
void LCS()                            // print out the length and the actual LCS
{
    int i, j, idx = 0;
    constructSA();
    computeLCP();
 
    for (i = 1, maxLCP = -1; i < n; i++)
    {
        if (LCP[i] > maxLCP && owner(SA[i]) != owner(SA[i-1]))
        {
            maxLCP = LCP[i];
            idx = i;
            ans = T.substr(SA[i], maxLCP);
            s.clear();
            s.insert(ans);
        }
        else if(LCP[i] == maxLCP && owner(SA[i]) != owner(SA[i-1]))
        {
            ans = T.substr(SA[i], maxLCP);
            s.insert(ans);
        }
    }
}
 
 
int main()
{
    char cc[MAX_N];
    int t;
    scanf("%d", &t);
    bool f = false;
    while(scanf("%s", cc) != EOF)
    {
        maxLCP = 0;
        T = cc;
        n = T.size();
        T += '.';
        n++;
        scanf("%s", cc);
        T += cc;
        m = T.size() - n;
        n += m;
        T += '}';
        n++;
        s.clear();
        LCS();
        if(f)
            printf("\n");
        f = true;
        if(maxLCP == 0)
            printf("No common sequence.\n");
        else
            for (set<string>::iterator it=s.begin(); it!=s.end(); ++it)
                cout <<  *it << endl;
    }
    return 0;
}