
 
struct data {
    int complete;
    int edges[11];
    data() {
        complete=-1;
        mem(edges,-1);
    }
};
 
int tot_node;
data trie[MAX];
char text[15];
int trie_insert_get_prefix(int node,int indx)
{
    if(text[indx]=='\0') {
        if(trie[node].complete!=-1) return 1;
        trie[node].complete=1;
        return 0;
    }
    int now=text[indx]-'0';
    if(trie[node].edges[now]==-1) trie[node].edges[now]=++tot_node;
    if(trie[node].complete==1) return 1;
 
    trie[ node  ].complete=0;
    return  trie_insert_get_prefix(trie[node].edges[now],indx+1);
 
}
 
int main(void)
{
    int cas,loop=0,n,ok;
    scanf("%d",&cas);
    while(cas--)
    {
        tot_node=0;ok=0;
        scanf("%d",&n);
        printf("Case %d: ",++loop);
        while(n--)
        {
            scanf("%s",text);
            if(ok) continue;
            ok+=trie_insert_get_prefix(0,0);
        }
        if(ok) puts("NO");
        else puts("YES");
        for(int i=0;i<=tot_node;i++) trie[i]=data();
    }
    return 0;
}