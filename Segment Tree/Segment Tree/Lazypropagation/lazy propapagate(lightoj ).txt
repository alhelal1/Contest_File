#include <stdio.h>
#include <iostream>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <string>
#include <string.h>
#include <queue>
#include <vector>
#include <stack>
#include <map>
#include <list>
#include <cstdlib>
 
#define FOR(i,n) for(i=1;i<=n;i++)
#define FORa(i,n) for(i=0;i<n;i++)
#define init(i,a,n) for(i=0;i<n;i++)a[i]=i
#define pinf 99999999
#define ninf -99999999
#define ms0(a) memset(a,0,sizeof(a))
#define msn(a,n) memset(a,n,sizeof(a))
#define LL long long
#define LLU unsigned long long
#define DB double
#define LD long double
#define eps 1e-10
#define SQR(x) ((x)*(x))
#define pb push_back
#define all(x) sort(x.begin(),x.end())
#define inpI ({int a; scanf(" %d", &a); a;})
#define inpD ({DB a; scanf(" %lf", &a); a;})
#define inpLL ({LL a; scanf(" %lld", &a); a;})
#define CS printf("Case %d:\n",cs++)
#define PI 3.1415926535897932384626433832795
int aComp(const void * a, const void * b){return (*(int*)a-*(int*)b );}
int dComp(const void * a, const void * b){return (*(int*)b-*(int*)a );}
//qsort (array,size, sizeof(int), aComp);
 
 
using namespace std;
//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[6]={2,1,-1,-2,-1,1};int dy[6]={0,1,1,0,-1,-1}; //Hexagonal Direction
 
 
struct SegmentTree
{
    LL l, r,lazy,sum;
}T[500000];
 
LL data[101000],SUM;
 
void buildTree( int l, int r, int root)
{
   int mid = (l + r) / 2;
   T[root].l = l, T[root].r = r;
   T[root].lazy = 0;
   T[root].sum = 0;
   if( l == r )
   {
    T[root].sum = data[l];
    return;
   }
   buildTree(l, mid, root * 2);
   buildTree(mid + 1, r, root * 2 + 1);
   T[root].sum = T[root * 2].sum + T[root * 2 + 1].sum;
}
 
void update( int root)
{
 
    T[root*2].lazy   += T[root].lazy;
    T[root*2+1].lazy += T[root].lazy;
    T[root].sum      += (T[root].r - T[root].l + 1) * T[root].lazy;
    T[root].lazy      = 0;
 
}
 
void add(int root, int a, int b,long long  val)
{
  int mid = (T[root].l + T[root].r) / 2;
  if( T[root].l == a && T[root].r == b)
  {
     T[root].lazy += val;
     update(root);
     return;
  }
  if( T[root].lazy != 0)
  update(root);
  if( mid >= b)
    add(root * 2, a, b, val);
  else if( mid < a )
    add(root * 2 + 1, a, b, val);
  else
  {
    add(root * 2, a, mid, val);
    add(root * 2 + 1, mid + 1, b, val);
  }
  if( T[root * 2].lazy != 0)
  update(root * 2);
  if( T[root * 2 + 1].lazy != 0)
  update(root * 2 + 1);
  T[root].sum = T[root * 2].sum + T[root * 2 + 1].sum;
}
 
 
void  query( int a, int b, int root)
{
   int mid = (T[root].l + T[root].r) / 2;
 
   if( T[root].lazy != 0) update(root);
 
   if( T[root].l == a && T[root].r == b ) SUM += T[root].sum ;
   else
   {
      if( mid >= b )     query(a, b, root * 2);
 
      else if( mid < a)  query(a, b, root * 2 + 1);
      else
      {
                         query(a, mid, root * 2);
 
                         query(mid + 1, b, root * 2 + 1);
      }
 
   }
}
 
 
int main()
{
    int t,cs=1;
    t=inpI;
    LL i,x,y,val;
    while(t--)
    {
      LL n=inpLL,Q=inpLL;
 
      for(i=1;i<=n;i++)data[i]=inpLL;
 
      CS;
      buildTree(1, n, 1);
      while(Q--)
      {
         SUM = 0;
 
         int option=inpI;
 
         if(option==1)
         {
            x=inpI;
            query(x+1,x+1,1);
            printf("%lld\n",SUM);
            add(1, x+1, x+1,-SUM);
         }
         else if(option==2)
         {
            x=inpI;
            val=inpLL;
            add(1, x+1, x+1,val);
         }
         else if(option==3)
         {
             x=inpI;y=inpI;
             query(x+1,y+1,1);
             printf("%lld\n",SUM);
         }
      }
 
    }
    return 0;
}