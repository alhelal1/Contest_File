using namespace std;
#include<bits/stdc++.h>
typedef long long  LL;
typedef   pair<LL,LL>  PII;
typedef   vector< PII > VPII;
typedef   vector<long long>   VI;
typedef   map<string,LL>  MSI;
typedef   map<LL,LL>  MII;
///Print
#define R(n)       scanf("%lld", &n)
#define P(a)  printf("%lld\n",a)
#define NL printf("\n")
///Case
#define CASE(no) printf("Case %lld: ",++no)
#define CASENL(no) printf("Case %lld:\n",++no)
///LOOP
#define FOR(x,n) for(__typeof(n) x=0;x<(n);x++)
#define FORS(i,x) for(int  i=0;i<(x.size());i++)
#define FORR(x,n) for(__typeof(n) x=1;x<=(n);x++)
#define FORSTL(x,n) for(__typeof(n.begin()) x=n.begin();x!=n.end();x++)
///Shortcut
#define MEM(ar,value) memset(ar,value,sizeof(ar))
#define ALL(x) x.begin(),x.end()
#define Unique(store) store.resize(unique(store.begin(),store.end())-store.begin())
#define LEN(s) s.size()
#define MP make_pair
#define PB push_back
#define FF first
#define SS second
#define MIN3(a,b,c) min(a,min(b,c))
#define MAX3(a,b,c) max(a,max(b,c))
#define EPS (1e-9)
#define PI acos(-1.0)
#define isEq(a,b) (fabs((a)-(b))<eps)
#define FAST ios_base::sync_with_stdio(false); cin.tie(false);
///DEBUG
#define D(x) cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<endl;
#define DD(x,y) cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<endl;
#define DDD(x,y,z) cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<" | "#z" = "<<z<<endl;
template<class T>T gcd(T a,T b){return b == 0 ? a : gcd(b, a % b);}
template<typename T>T lcm(T a, T b) {return a / gcd(a,b) * b;}
template<class T>T my_pow(T n,T p){if(p==0)return 1;T x=my_pow(n,p/2);x=(x*x);if(p&1)x=(x*n);return x;} ///n to the power p
template<class T>T big_mod(T n,T p,T m){if(p==0)return (T)1;T x=big_mod(n,p/2,m);x=(x*x)%m;if(p&1)x=(x*n)%m;return x;}
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}/// extract words or numbers from a line
string itos(LL n){string s;while(n){s+=(n%10+48);n/=10;}reverse(ALL(s));return s;}
LL stoi(string s){LL n=0;FOR(i,LEN(s))n=n*10+(s[i]-48);return n;}
//struct info{LL x,y;}arr[100005];bool com(info a,info b){return (a.x<b.x) or (a.x==b.x and a.y<b.y);}

//LL ar[1000005],ar1[1000005];




//LL a=0,b=0,c=0,r=0,rr=0,res=0,n,m,t=0,ks=0;
//string  s,ss;



LL tree[400005],ar[100005];
LL n,m,q,ks=0,a,b;
void insert(LL idx,LL st,LL end)
{
    if(st==end)
    {
        tree[idx]=ar[st];
        return ;
    }

    LL mid=(st+end)/2;
    insert(idx*2,st,mid);
    insert(idx*2+1,mid+1,end);
    tree[idx]=min(tree[idx*2],tree[idx*2+1]);

    return ;
}

LL query(LL idx,LL st,LL end,LL i,LL j)
{
    if(st==i and end==j)
    {
        return tree[idx];
    }
    LL mid=(st+end)/2;
    if(j<=mid)  return   query(idx*2,st,mid,i,j);
    else if(i>mid)  return query(idx*2+1,mid+1,end,i,j);
    else
    {
        LL aa=query(idx*2,st,mid,i,mid);
        LL bb=query(idx*2+1,mid+1,end,mid+1,j);
        return min(aa,bb);

    }

}




int main()
{
    //Fast;

    LL t;
    scanf("%lld",&t);
    while(t--)
    {

        MEM(tree,false);
        MEM(ar,false);
        scanf("%lld",&n);
        FORR(i,n)R(ar[i]);
         insert(1,1,n);


         LL ans=0;

         FORR(i,n)
         {

             LL aa=ar[i];
             LL lo=i,hi=n;

            // D(aa);

             LL r=i;

             while(lo<=hi)
             {


                 LL mid=(lo+hi)/2;
                 LL bb=query(1,1,n,i,mid);
                 if(bb>=aa)
                 {
                     r=max(r,mid);
                     lo=mid+1;
                 }
                 else
                 {
                     hi=mid-1;
                 }
             }


            // D(r);

             lo=1,hi=i-1;
             LL rr=10000000000LL;
             while(lo<=hi)
             {
                LL mid=(lo+hi)/2;
                LL bb=query(1,1,n,mid,i-1);
                 if(bb>=aa)
                 {
                     rr=min(rr,mid);
                     hi=mid-1;
                 }
                 else
                 {
                     lo=mid+1;
                 }
             }


            // D(rr);
             LL tt=r-i+1;


             if(rr!=10000000000LL)

             tt+=(i-rr);

             ans=max(ans,tt*ar[i]);

         }

         printf("Case %lld: %lld\n",++ks,ans);

    }






   return 0;

}


