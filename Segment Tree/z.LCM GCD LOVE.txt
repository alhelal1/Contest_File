#include <stdio.h>
template<class T> inline T min(T a, T b) { return a < b ? a : b; }
template<class T> inline T max(T a, T b) { return b < a ? a : b; }
template<class Int> inline Int abs(Int x)        { return x < 0 ? -x : x; }
template<class Float> inline Float fabs(Float x) { return x < 1e-9 ? -1.0*x : x; }
typedef __int64_t ll;
typedef __uint64_t ull;
const int MAXN = 100005;
const ll MOD = 1000000007LL;
ll lcm[3*MAXN], small[3*MAXN];
int arr[MAXN];
 
struct Node {
  int Min;
  int Max;
  int lazy;
} sq[4*MAXN];
 
void sieve() {
  lcm[0] = 0, lcm[1] = 1;
  for(int i=2; i<3*MAXN; ++i) {
    if(!small[i]) for(int j=i; j<3*MAXN; j+=i) small[j] = i;
    int p = small[i], j;
    for(j=i; j%p==0; j/=p);
    if(j == 1) lcm[i] = (lcm[i-1]*(ll)p) % MOD;
    else lcm[i] = lcm[i-1];
  }
}
 
int maximum;
int minimum;
 
void init(int p, int lo, int hi) {
  if(lo == hi) sq[p].Min = sq[p].Max = arr[lo];
  else {
    int mid = (lo+hi)/2;
    init(2*p, lo, mid);
    init(2*p+1, mid+1, hi);
    sq[p].Min = min(sq[2*p].Min, sq[2*p+1].Min);
    sq[p].Max = max(sq[2*p].Max, sq[2*p+1].Max);
  }
}
 
void push_lazy(int p, int lo, int hi) {
  if(sq[p].lazy) {
    sq[2*p].Min += sq[p].lazy, sq[2*p+1].Min += sq[p].lazy;
    sq[2*p].Max += sq[p].lazy, sq[2*p+1].Max += sq[p].lazy;
    sq[2*p].lazy += sq[p].lazy, sq[2*p+1].lazy += sq[p].lazy;
  }
  sq[p].lazy = 0;
}
 
void update(int p, int lo, int hi, int i, int j, int key) {
  if(lo == i && hi == j) {
    sq[p].Min += key;
    sq[p].Max += key;
    sq[p].lazy += key;
    return;
  }
  push_lazy(p, lo, hi);
  int mid = (lo+hi)/2;
  if(j <= mid) update(2*p, lo, mid, i, j, key);
  else if(i > mid) update(2*p+1, mid+1, hi, i, j, key);
  else {
    update(2*p, lo, mid, i, mid, key);
    update(2*p+1, mid+1, hi, mid+1, j, key);
  }
  sq[p].Min = min(sq[2*p].Min, sq[2*p+1].Min);
  sq[p].Max = max(sq[2*p].Max, sq[2*p+1].Max);
}
void query(int p, int lo, int hi, int i, int j) {
  if(lo == i && hi == j) {
    minimum = min(sq[p].Min, minimum);
    maximum = max(sq[p].Max, maximum);
    return;
  }
  push_lazy(p, lo, hi);
  int mid = (lo+hi)/2;
  if(j <= mid) query(2*p, lo, mid, i, j);
  else if(i > mid) query(2*p+1, mid+1, hi, i, j);
  else {
    query(2*p, lo, mid, i, mid);
    query(2*p+1, mid+1, hi, mid+1, j);
  }
}
 
int main() {
  int N, Q;
  scanf("%d %d", &N, &Q);
  for(int i=0; i<N; ++i) scanf("%d", arr+i);
  sieve();
  init(1, 0, N-1);
  while(Q--) {
    int t, i, j, p;
    scanf("%d %d %d", &t, &i, &j);
    if(t == 0) {
      scanf("%d", &p);
      update(1, 0, N-1, i, j, p);
    } else {
      minimum =  1000000000;
      maximum = -1000000000;
      query(1, 0, N-1, i, j);
      if(t == 1) printf("%lld\n", lcm[maximum]);
      else printf("%lld\n", lcm[minimum]);
    }
  }
  return 0;
}
  
 