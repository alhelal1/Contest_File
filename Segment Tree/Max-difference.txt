#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
struct T
{
    int mn , mx ;
}tree[300000+10];
int arr[100000+10];
T Update(int low,int high,int node)
{
    if(low==high)
    {
        tree[node].mn = arr[low-1];
        tree[node].mx = arr[low-1];
        return tree[node] ;
    }
    int mid = (low+high)/2 ;
    T a = Update(low,mid,2*node);
    T b = Update(mid+1,high,2*node+1);
    tree[node].mx = max (a.mx,b.mx) ;
    tree[node].mn = min (a.mn,b.mn) ;
    return tree[node] ;
}
T query(int low,int high,int a,int b,int node)
{
    if(a>high||b<low)
    {
        T temp ;
        temp.mn = 100000009;
        temp.mx = -100000009;
        return temp ;
    }
    if(low>=a&&high<=b)
    {
        return tree[node];
    }
    int mid = (low+high)/2 ;
    T ax = query(low,mid,a,b,2*node);
    T bx = query(mid+1,high,a,b,2*node+1);
    T temp ;
    temp.mx = max (ax.mx,bx.mx) ;
    temp.mn = min (ax.mn,bx.mn) ;
    return temp ;
}
int main()
{
    //freopen("input.txt","r",stdin);
    int test ;
    scanf("%d",&test);
    for(int cas=1;cas<=test;cas++)
    {
        int N , d ;
        scanf("%d%d",&N,&d);
        for(int i=0;i<N;i++) scanf("%d",&arr[i]);
        Update(1,N,1);
        int ans = -1;
        for(int i=0;i<N;i++)
        {
            int st = i+1 , fi = i+d;
            if(fi>N) break ;
            T x = query(1,N,st,fi,1);
            ans=max(ans,x.mx-x.mn);
        }
        printf("Case %d: %d\n",cas,ans);
    }
    return 0;
}