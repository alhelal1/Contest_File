#include<bits/stdc++.h>

using namespace std;

vector < int> p,p_fact[1010];
bool prime[ 1010];
bool vis[1001];
int dis[1001];
int m;

void primegen()
{
    p.push_back(2);
    for(int i=3;i< 1005;i+=2)
    {
        if(prime[i]==1)
            continue;
        p.push_back(i);
        for(int j=i+i;j< 1005;j=j+i)
            prime[j]=1;
    }
}
void prime_fact( int n, int nn)
{
    int i,j,l;
    l=sqrt(n);
    if(prime[n]==0 && n%2!=0 || n==2)
        return;
    for(i=0;p[i]<=l;i++)
    {
        if(n%p[i]==0)
        {
             int c=0;
            while(n%p[i]==0)
            {
                c++;
                n/=p[i];
            }
            p_fact[nn].push_back(p[i]);
            l=sqrt(n);
        }
    }
    if(n!=1)
        p_fact[nn].push_back(n);
}

void bfs(int node)
{
    queue< int > q;
    q.push(node);
    dis[node]=0;
    vis[node]=1;

    while(!q.empty())
    {
        int u=q.front();
        q.pop();
        int l= p_fact[u].size();
        for(int i=0;i<l;i++)
        {
            int v=u+p_fact[u][i];
            if(!vis[v] && v<=m)
            {
                q.push(v);
                vis[v]=1;
                dis[v]=dis[u]+1;
            }
        }
    }
}

int main()
{
    primegen();
    int i,j,k,l,n;
    int nc,tc=0;
    for(i=1;i<1000;i++)
        prime_fact(i,i);

    cin>>nc;

    while(nc--)
    {
        cin>>n>>m;
        memset(vis,0,sizeof(vis));
        memset(dis,0,sizeof(dis));
        bfs(n);

        if(vis[m]|| n==m)
            cout<<"Case "<<++tc<<": "<<dis[m]<<endl;
        else
            cout<<"Case "<<++tc<<": -1"<<endl;
    }
    return 0;
}
